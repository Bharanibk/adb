trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: databricks-stage         # has: databricks-host, databricks-token
- name: SRC_NOTEBOOKS_DIR
  value: notebook                 # folder in your repo (adjust if different)
- name: DEST_WORKSPACE_DIR
  value: /Shared/deploy/notebooks # where to copy in STAGING workspace

steps:
- checkout: self
  fetchDepth: 0

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'

- script: |
    python -m pip install --upgrade pip
    pip install --upgrade databricks-cli
    databricks --version
  displayName: Install Databricks CLI (legacy)

- script: |
    set -e
    echo "Using host: $(databricks-host)"
    export DATABRICKS_HOST="$(databricks-host)"
    export DATABRICKS_TOKEN="$(databricks-token)"

    echo "Listing / before import"
    databricks workspace ls /

    echo "Ensuring destination: $(DEST_WORKSPACE_DIR)"
    databricks workspace mkdirs "$(DEST_WORKSPACE_DIR)"

    echo "Importing from repo folder: $(SRC_NOTEBOOKS_DIR)"
    databricks workspace import_dir --overwrite "$(SRC_NOTEBOOKS_DIR)" "$(DEST_WORKSPACE_DIR)"

    echo "Listing destination after import"
    databricks workspace ls "$(DEST_WORKSPACE_DIR)"
  displayName: Import notebooks to STAGING

# Upsert the job in STAGING (reset if exists, else create)
- script: |
    set -e
    export DATABRICKS_HOST="$(databricks-host)"
    export DATABRICKS_TOKEN="$(databricks-token)"

    sudo apt-get update -y
    sudo apt-get install -y jq

    JOB_NAME="employee_master_job"
    JOB_JSON="jobs/employee_master_job.stage.json"

    echo "Looking for existing job named: $JOB_NAME"
    JOB_ID=$(databricks jobs list --output JSON | jq -r '.jobs[] | select(.settings.name=="'"$JOB_NAME"'") | .job_id' | head -n1)

    if [ -n "$JOB_ID" ] && [ "$JOB_ID" != "null" ]; then
      echo "Found job_id=$JOB_ID — resetting with new settings"
      databricks jobs reset --job-id "$JOB_ID" --new-settings "@$JOB_JSON"
    else
      echo "Job not found — creating new job"
      databricks jobs create --json "@$JOB_JSON"
    fi

    echo "Done. Current jobs:"
    databricks jobs list
  displayName: Upsert Databricks job (stage)
